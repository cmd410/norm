RollbackError	norm/sqlite.html#RollbackError	sqlite: RollbackError	
NotFoundError	norm/sqlite.html#NotFoundError	sqlite: NotFoundError	
cpRaise	norm/sqlite.html#cpRaise	ConflictPolicy.cpRaise	
cpIgnore	norm/sqlite.html#cpIgnore	ConflictPolicy.cpIgnore	
cpReplace	norm/sqlite.html#cpReplace	ConflictPolicy.cpReplace	
ConflictPolicy	norm/sqlite.html#ConflictPolicy	sqlite: ConflictPolicy	
dbHostEnv	norm/sqlite.html#dbHostEnv	sqlite: dbHostEnv	
getDb	norm/sqlite.html#getDb	sqlite: getDb(): DbConn	
withDb	norm/sqlite.html#withDb.t,untyped	sqlite: withDb(body: untyped): untyped	
dropDb	norm/sqlite.html#dropDb	sqlite: dropDb()	
createTables	norm/sqlite.html#createTables,,T	sqlite: createTables[T: Model](dbConn; obj: T)	
insert	norm/sqlite.html#insert,,T	sqlite: insert[T: Model](dbConn; obj: var T; force = false; conflictPolicy = cpRaise)	
insert	norm/sqlite.html#insert,,openArray[T]	sqlite: insert[T: Model](dbConn; objs: var openArray[T]; force = false;\n                 conflictPolicy = cpRaise)	
select	norm/sqlite.html#select,,T,string,varargs[DbValue,dbValue]	sqlite: select[T: Model](dbConn; obj: var T; cond: string;\n                 params: varargs[DbValue, dbValue])	
select	norm/sqlite.html#select,,seq[T],string,varargs[DbValue,dbValue]	sqlite: select[T: Model](dbConn; objs: var seq[T]; cond: string;\n                 params: varargs[DbValue, dbValue])	
selectAll	norm/sqlite.html#selectAll,,seq[T]	sqlite: selectAll[T: Model](dbConn; objs: var seq[T])	
count	norm/sqlite.html#count,,typedesc[Model],string,string,varargs[DbValue,dbValue]	sqlite: count(dbConn; T: typedesc[Model]; col = &quot;*&quot;; dist = false; cond = &quot;1&quot;;\n      params: varargs[DbValue, dbValue]): int64	
update	norm/sqlite.html#update,,T	sqlite: update[T: Model](dbConn; obj: var T)	
update	norm/sqlite.html#update,,openArray[T]	sqlite: update[T: Model](dbConn; objs: var openArray[T])	
delete	norm/sqlite.html#delete,,T	sqlite: delete[T: Model](dbConn; obj: var T)	
delete	norm/sqlite.html#delete,,openArray[T]	sqlite: delete[T: Model](dbConn; objs: var openArray[T])	
rollback	norm/sqlite.html#rollback	sqlite: rollback()	
transaction	norm/sqlite.html#transaction.t,,untyped	sqlite: transaction(dbConn; body: untyped): untyped	
